{"version":3,"sources":["pages/Home/index.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","margin","spacing","width","repoListItemDesc","display","flexDirection","container","flexWrap","textField","marginLeft","marginRight","octokit","Octokit","getContributions","state","setState","repos","stateCallback","count","newCount","contributions","responseData","_","reduce","acc","item","weekData","get","week","total","days","map","day","index","Object","assign","loading","combinedState","length","forEach","repo","setTimeout","getRepoInfo","bind","callback","getCommitActivityStats","owner","login","name","then","response","data","err","console","log","Home","classes","useState","user","ownerName","fromDate","moment","subtract","toDate","key","chain","contribution","value","className","noValidate","autoComplete","onSubmit","e","preventDefault","auth","TextField","id","label","onChange","$event","target","Button","variant","color","type","listForOrg","org","newState","listForUser","username","loaduserData","loadRepos","isEmpty","CircularProgress","List","component","aria-label","ListItem","ListItemAvatar","Avatar","ListItemText","primary","secondary","description","href","html_url","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e1c6f416.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Octokit } from \"@octokit/rest\";\nimport _ from \"lodash\";\nimport moment from \"moment\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport FolderOpenIcon from \"@material-ui/icons/FolderOpen\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n      width: \"25ch\",\n    },\n  },\n  repoListItemDesc: {\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  container: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n  },\n  textField: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    width: 200,\n  },\n}));\n\nlet octokit = new Octokit({});\n\nfunction Home() {\n  const classes = useStyles();\n  const [state, setState] = useState({\n    user: false,\n    ownerName: \"\",\n    repos: [],\n    fromDate: moment().subtract(1, \"y\"),\n    toDate: moment(),\n    contributions: {},\n    loading: false,\n    key: \"\",\n  });\n  const contributions = _.chain(state.contributions)\n    .map((item) => item.total)\n    .reduce((acc, contribution) => acc + contribution, 0)\n    .value();\n  return (\n    <section>\n      <form\n        className={classes.root}\n        noValidate\n        autoComplete=\"off\"\n        onSubmit={(e) => {\n          e.preventDefault();\n          octokit = new Octokit({\n            auth: state.key,\n          });\n        }}\n      >\n        <TextField\n          id=\"key\"\n          label=\"GitHub Personal access key\"\n          onChange={($event) => {\n            setState(Object.assign({}, state, { key: $event.target.value }));\n          }}\n        />\n        <Button variant=\"contained\" color=\"primary\" type=\"submit\">\n          Authenticate\n        </Button>\n      </form>\n      <form\n        className={classes.root}\n        noValidate\n        autoComplete=\"off\"\n        onSubmit={(e) => {\n          e.preventDefault();\n          loadRepos(state, setState);\n        }}\n      >\n        <TextField\n          id=\"username\"\n          label=\"Username\"\n          onChange={($event) => {\n            setState(\n              Object.assign({}, state, { ownerName: $event.target.value })\n            );\n          }}\n        />\n        <Button variant=\"contained\" color=\"primary\" type=\"submit\">\n          Get\n        </Button>\n      </form>\n\n      {!_.isEmpty(state.repos) && (\n        <div>\n          <h4>Contributions for last one year</h4>\n          {/* <form className={classes.container} noValidate>\n            <TextField\n              id=\"from-date\"\n              label=\"From\"\n              type=\"date\"\n              defaultValue={state.fromDate.format(\"YYYY-MM-DD\")}\n              className={classes.textField}\n              InputLabelProps={{\n                shrink: true,\n              }}\n            />\n            <TextField\n              id=\"from-date\"\n              label=\"From\"\n              type=\"date\"\n              defaultValue={state.toDate.format(\"YYYY-MM-DD\")}\n              className={classes.textField}\n              InputLabelProps={{\n                shrink: true,\n              }}\n            />\n          </form> */}\n          <span>{contributions}</span>\n        </div>\n      )}\n      {state.loading && <CircularProgress />}\n\n      <List component=\"nav\" aria-label=\"main mailbox folders\">\n        {_.map(state.repos, (item) => (\n          <ListItem key={item.id}>\n            <ListItemAvatar>\n              <Avatar>\n                <FolderOpenIcon />\n              </Avatar>\n            </ListItemAvatar>\n            <div className={classes.repoListItemDesc}>\n              <ListItemText primary={item.name} secondary={item.description} />\n              <a href={item.html_url} target=\"_blank\">\n                {item.html_url}\n              </a>\n            </div>\n          </ListItem>\n        ))}\n      </List>\n    </section>\n  );\n}\n\nfunction loadRepos(state, setState) {\n  setState(Object.assign({}, state, { loading: true }));\n  octokit.repos.listForOrg({ org: state.ownerName }).then(\n    (response) => {\n      const newState = Object.assign({}, state, {\n        user: true,\n        repos: response.data,\n        loading: true,\n      });\n      setState(newState);\n      getContributions(newState, setState, newState.repos);\n    },\n    (err) => {\n      loaduserData(state, setState);\n      console.log(err);\n    }\n  );\n}\n\nfunction loaduserData(state, setState) {\n  octokit.repos.listForUser({ username: state.ownerName }).then(\n    (response) => {\n      const newState = Object.assign({}, state, {\n        user: true,\n        repos: response.data,\n        loading: true,\n      });\n      setState(newState);\n      getContributions(newState, setState, newState.repos);\n    },\n    (err) => {\n      console.log(err);\n      setState(Object.assign({}, state, { loading: false }));\n    }\n  );\n}\n\nfunction combinedState(count, state, setState) {\n  let newCount = count;\n  let contributions = {};\n  return (responseData) => {\n    newCount--;\n    contributions = _.reduce(\n      responseData,\n      (acc, item) => {\n        const weekData = _.get(acc, item.week, {\n          total: 0,\n          week: item.week,\n          days: [0, 0, 0, 0, 0, 0, 0],\n        });\n        weekData.total += item.total;\n        weekData.days = _.map(\n          weekData.days,\n          (day, index) => day + _.get(item, [\"days\", index], 0)\n        );\n        const newAcc = Object.assign({}, acc, { [item.week]: weekData });\n        return newAcc;\n      },\n      contributions\n    );\n    if (newCount == 0) {\n      setState(Object.assign({}, state, { contributions, loading: false }));\n    }\n  };\n}\n\nfunction getContributions(state, setState, repos) {\n  const stateCallback = combinedState(repos.length, state, setState);\n  _.forEach(repos, (repo) => {\n    setTimeout(getRepoInfo.bind(this, stateCallback, repo), 400);\n  });\n}\n\nfunction getRepoInfo(callback, repo) {\n  octokit.repos\n    .getCommitActivityStats({\n      owner: repo.owner.login,\n      repo: repo.name,\n    })\n    .then(\n      (response) => {\n        callback(response.data);\n      },\n      (err) => {\n        console.log(err);\n      }\n    );\n}\n\nexport default Home;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport \"./App.css\";\nimport Home from \"./pages/Home\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}